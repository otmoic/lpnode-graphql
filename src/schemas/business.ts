import { businessModule } from "../mongo_model/business";
import * as _ from "lodash";
import { logger } from "../sys_lib/logger";
import { dataProcess } from "../data_process";

const typeDefs = `#graphql

# Comments in GraphQL strings (such as this one) start with the hash (#) symbol.
type EventTransferInConfirm {
  business_id: Int
  transfer_info: String
  transfer_id: String
  preimage: String
}

type EventTransferIn {
  transfer_id: String
  sender: String
  receiver: String
  token: String
  token_amount: String
  eth_amount: String
  hash_lock: String
  hash_lock_original: String
  time_lock: Int
  src_chain_id: Int
  src_transfer_id: String
  transfer_info: String
}

type EventTransferOut {
  transfer_out_id: Int
  business_id: Int
  transfer_info: String
  transfer_id: String
  sender: String
  receiver: String
  token: String
  amount: String
  hash_lock: String
  time_lock: Int
  dst_chain_id: Int
  dst_address: String
  bid_id: String
  dst_token: String
  dst_amount: String
}

type Business {
  business_id: Int
  step: Int
  business_hash: String
  business_hash_q: String
}

type PreBusiness {
  hash: String
  lp_salt: String
  hashlock_evm: String
  hashlock_xrp: String
  hashlock_near: String
  locked: Boolean
  timestamp: String
  order_append_data: String
}

type AutogeneratedMainType_Business {
  _id: String
  event_transfer_out_confirm: String
  event_transfer_out_refund: String
  event_transfer_in_refund: String
  event_transfer_in_confirm: EventTransferInConfirm
  event_transfer_in: EventTransferIn
  event_transfer_out: EventTransferOut
  business: Business
  pre_business: PreBusiness
}

# 聚合结果集
type AggregateBusiness {
  step: Float
}

type Avg {
  business: AggregateBusiness
}

type Sum {
  business: AggregateBusiness
}

type Min {
  business: AggregateBusiness
}

type Max {
  business: AggregateBusiness
}

type AggregateResult {
  avg: Avg
  sum: Sum
  min: Min
  max: Max
}

# 过滤相关 Where 定义
input Business_business_where{
  business_hash: StringFilter
  step: IntFilter
  _and: Business_business_where
  _or: Business_business_where
}
input Business_where {
  _id: StringFilter
  business: Business_business_where
  _and: Business_where
  _or: Business_where
}

## dis On Input
enum _disOnBusinessField_business{
  business_hash
}
enum _disTopBusinessEnumField{
  _id
}
input _disOnBusinessField {
  business : _disOnBusinessField_business
  _top: _disTopBusinessEnumField
}

# 排序输入相关
input Business_order_by_business_business_hash{
  business_hash:orderType
  step:orderType
}
input Business_order_by{
  _id:orderType
  business:Business_order_by_business_business_hash
}

##  聚合orderby
input Business_Aggregate_order_by_business_business_hash{
  business_hash:orderType
}

input Business_Aggregate_order_by{
  _id:orderType,
  business:Business_Aggregate_order_by_business_business_hash
}
type Query {
  businessList(offset:Int,limit:Int,where:Business_where,order_by:Business_order_by): [AutogeneratedMainType_Business]
  businessAggregate(offset:Int,limit:Int,where:Business_where,order_by:Business_Aggregate_order_by,distinct_on:_disOnBusinessField):[AggregateResult]
}
`;

const resolvers = {
  Query: {
    businessList: async (__, contextValue) => {
      logger.info(contextValue);
      try {
        return await dataProcess.query(businessModule, contextValue);
      } catch (e) {
        logger.error(e);
        throw e;
      }
    },
    businessAggregate: async (__, contextValue, ___, fieldInfo, ____) => {
      logger.info(contextValue);
      try {
        return await dataProcess.aggregate(
          businessModule,
          contextValue,
          fieldInfo
        );
      } catch (e) {
        logger.error(e);
        throw e;
      }
    },
  },
};
export { typeDefs, resolvers };
